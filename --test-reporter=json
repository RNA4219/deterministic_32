import fs from 'node:fs';
import path from 'node:path';
import { spawn } from 'node:child_process';
import { fileURLToPath, pathToFileURL } from 'node:url';

const DESTINATION_PREFIX = '--test-reporter-destination=';
const DEFAULT_DESTINATION = 'logs/test.jsonl';
const DEFAULT_TARGETS = ['dist/tests', 'dist/frontend/tests'];
const OPTIONS_EXPECTING_VALUE = new Set([
  '--import',
  '--loader',
  '--require',
  '--test-ignore',
  '--test-name-pattern',
  '--test-reporter',
  '--test-reporter-destination',
]);

const scriptDirectory = path.dirname(fileURLToPath(import.meta.url));

const projectRoot = (() => {
  let current = scriptDirectory;

  while (true) {
    if (path.basename(current) === 'dist') {
      const parent = path.dirname(current);

      if (parent !== current) {
        return parent;
      }

      return current;
    }

    const parent = path.dirname(current);

    if (parent === current) {
      return scriptDirectory;
    }

    current = parent;
  }
})();

const mapTargetArgument = (
  target,
  { existsSync = fs.existsSync, mapDirectoriesToDist = false } = {},
) => {
  if (!target) {
    return target;
  }

  const absoluteFromProject = path.isAbsolute(target)
    ? target
    : path.resolve(projectRoot, target);
  const absoluteFromCwd = path.isAbsolute(target)
    ? target
    : path.resolve(target);

  const absoluteCandidates = [];
  const pushCandidate = (candidate) => {
    if (!absoluteCandidates.includes(candidate)) {
      absoluteCandidates.push(candidate);
    }
  };

  pushCandidate(absoluteFromCwd);
  pushCandidate(absoluteFromProject);

  const safeExists = (value) => {
    if (!value || typeof existsSync !== 'function') {
      return false;
    }
    try {
      return existsSync(value);
    } catch {
      return false;
    }
  };

  const evaluateCandidate = (absoluteCandidate) => {
    const relativePathFromProject = path.relative(
      projectRoot,
      absoluteCandidate,
    );
    const normalizedRelative = path.normalize(relativePathFromProject);
    const extension = path.extname(normalizedRelative);
    const upwardPrefix = `..${path.sep}`;

    if (
      normalizedRelative === '..' ||
      normalizedRelative.startsWith(upwardPrefix)
    ) {
      return { result: target, score: -1 };
    }

    if (extension === '.ts') {
      const withoutExtension = extension.length > 0
        ? normalizedRelative.slice(0, -extension.length)
        : normalizedRelative;

      const normalizedSegments = withoutExtension
        .split(path.sep)
        .filter((segment) => segment && segment !== '.' && segment !== '..');
      const distPath = path.join('dist', ...normalizedSegments);
      const mapped = `${distPath}.js`;
      const mappedExists =
        safeExists(mapped) || safeExists(path.resolve(projectRoot, mapped));

      return { result: mapped, score: mappedExists ? 4 : 2 };
    }

    const inDistAlready =
      normalizedRelative === 'dist' ||
      normalizedRelative.startsWith(`dist${path.sep}`);

    if (inDistAlready) {
      return { result: target, score: 3 };
    }

    const distCandidate = path.join('dist', normalizedRelative);
    const distCandidateAbsolute = path.resolve(projectRoot, distCandidate);
    const distExists =
      safeExists(distCandidate) || safeExists(distCandidateAbsolute);

    if (mapDirectoriesToDist && extension.length === 0) {
      return { result: distCandidate, score: distExists ? 3 : 1 };
    }

    if (distExists) {
      return { result: distCandidate, score: 2 };
    }

    const targetExists =
      safeExists(target) ||
      safeExists(absoluteCandidate) ||
      safeExists(path.resolve(projectRoot, target));

    return { result: target, score: targetExists ? 1 : 0 };
  };

  let bestEvaluation = evaluateCandidate(absoluteCandidates[0]);

  for (const candidate of absoluteCandidates.slice(1)) {
    const evaluation = evaluateCandidate(candidate);

    if (!bestEvaluation || evaluation.score > bestEvaluation.score) {
      bestEvaluation = evaluation;
    }
  }

  return bestEvaluation ? bestEvaluation.result : target;
};

const prepareRunnerOptions = (
  argv = process.argv,
  {
    existsSync = fs.existsSync,
    defaultTargets = DEFAULT_TARGETS,
  } = {},
) => {
  const passthroughArgs = [];
  const explicitTargets = [];
  const resolvedDefaults = [];
  const seenTargets = new Set();
  let destinationOverride = null;
  let pendingOption = null;

  const addResolvedTarget = (candidate, bucket) => {
    if (!candidate) {
      return;
    }

    if (seenTargets.has(candidate)) {
      return;
    }

    seenTargets.add(candidate);
    bucket.push(candidate);
  };

  const resolveTargetCandidate = (candidate) => {
    if (!candidate || typeof candidate !== 'string') {
      return null;
    }

    const normalized = mapTargetArgument(candidate, {
      existsSync,
      mapDirectoriesToDist: true,
    });

    const candidateAbsoluteFromProject = path.resolve(projectRoot, candidate);
    const candidateAbsoluteFromCwd = path.resolve(candidate);
    const candidateExists = () => {
      if (typeof existsSync !== 'function') {
        return false;
      }
      try {
        return (
          existsSync(candidate) ||
          existsSync(candidateAbsoluteFromProject) ||
          existsSync(candidateAbsoluteFromCwd)
        );
      } catch {
        return false;
      }
    };

    if (normalized && normalized !== candidate) {
      const normalizedAbsolute = path.resolve(projectRoot, normalized);
      const normalizedAbsoluteFromCwd = path.resolve(normalized);

      if (
        existsSync(normalized) ||
        existsSync(normalizedAbsolute) ||
        existsSync(normalizedAbsoluteFromCwd) ||
        candidateExists()
      ) {
        return normalized;
      }
    }

    if (candidateExists()) {
      const projectRelative = path.relative(
        projectRoot,
        candidateAbsoluteFromProject,
      );

      if (
        projectRelative &&
        projectRelative !== '..' &&
        !projectRelative.startsWith(`..${path.sep}`)
      ) {
        return projectRelative;
      }

      return candidateAbsoluteFromProject;
    }

    return null;
  };

  for (const argument of argv.slice(2)) {
    if (!argument) {
      continue;
    }

    if (pendingOption) {
      if (pendingOption === '--test-reporter-destination') {
        destinationOverride = argument || null;
      } else {
        passthroughArgs.push(argument);
      }
      pendingOption = null;
      continue;
    }

    if (argument.startsWith(DESTINATION_PREFIX)) {
      const candidateDestination = argument.slice(DESTINATION_PREFIX.length);
      destinationOverride = candidateDestination || null;
      continue;
    }

    if (argument.startsWith('--')) {
      const assignmentIndex = argument.indexOf('=');
      const optionName = assignmentIndex === -1
        ? argument
        : argument.slice(0, assignmentIndex);
      const isDestinationOption =
        optionName === '--test-reporter-destination';

      if (!isDestinationOption) {
        passthroughArgs.push(argument);
      }

      if (assignmentIndex === -1) {
        if (OPTIONS_EXPECTING_VALUE.has(optionName)) {
          pendingOption = optionName;
        }
      } else if (isDestinationOption) {
        const value = argument.slice(assignmentIndex + 1);
        destinationOverride = value || null;
      }
      continue;
    }

    const resolvedTarget = resolveTargetCandidate(argument);

    if (resolvedTarget) {
      addResolvedTarget(resolvedTarget, explicitTargets);
      continue;
    }

    passthroughArgs.push(argument);
  }

  for (const candidate of defaultTargets) {
    if (!candidate) {
      continue;
    }

    const resolvedTarget = resolveTargetCandidate(candidate);

    if (!resolvedTarget) {
      continue;
    }

    addResolvedTarget(resolvedTarget, resolvedDefaults);
  }

  const targets = explicitTargets.length > 0 ? explicitTargets : resolvedDefaults;

  if (targets.length === 0 && defaultTargets.length > 0) {
    const fallbackCandidate = resolveTargetCandidate(defaultTargets[0]);
    addResolvedTarget(fallbackCandidate, targets);
  }

  return { passthroughArgs, targets, destinationOverride };
};

const resolveDestination = (override) => {
  if (override) {
    return override;
  }

  for (const entry of fs.readdirSync('.', { withFileTypes: true })) {
    if (!entry.name.startsWith(DESTINATION_PREFIX)) {
      continue;
    }
    let suffix = entry.name.slice(DESTINATION_PREFIX.length);
    let current = entry.isDirectory() ? entry.name : null;
    while (current) {
      const contents = fs.readdirSync(current, { withFileTypes: true });
      const next = contents.find((item) => item.isDirectory());
      if (!next) {
        break;
      }
      suffix = path.join(suffix, next.name);
      current = path.join(current, next.name);
    }
    return suffix || DEFAULT_DESTINATION;
  }
  return DEFAULT_DESTINATION;
};

export { prepareRunnerOptions };

const runJsonReporter = async () => {
  const { passthroughArgs, targets, destinationOverride } = prepareRunnerOptions();
  const destination = resolveDestination(destinationOverride);
  const resolvedDestination = path.resolve(destination);
  fs.mkdirSync(path.dirname(resolvedDestination), { recursive: true });

  const reporterSpecifier = pathToFileURL(path.resolve('reporters/json/index.js')).href;
  const args = [
    '--test',
    `--test-reporter=${reporterSpecifier}`,
    `--test-reporter-destination=${resolvedDestination}`,
    ...targets,
    ...passthroughArgs
  ];

  const childEnv = { ...process.env };
  delete childEnv.NODE_TEST_CONTEXT;
  const spawnOverride = globalThis.__CAT32_TEST_SPAWN__;
  const spawnFunction = typeof spawnOverride === 'function' ? spawnOverride : spawn;
  const child = spawnFunction(process.execPath, args, { stdio: 'inherit', env: childEnv });
  for (const signal of ['SIGINT', 'SIGTERM', 'SIGQUIT']) {
    process.on(signal, () => {
      if (!child.killed) {
        child.kill(signal);
      }
    });
  }

  const exitResult = await new Promise((resolve) => {
    child.once('error', (error) => {
      console.error(error);
      resolve({ code: 1, signal: null });
    });
    child.once('exit', (code, signal) => {
      resolve({ code, signal });
    });
  });

  if (exitResult.signal) {
    process.kill(process.pid, exitResult.signal);
  } else {
    process.exit(exitResult.code ?? 1);
  }
};

if (process.env.__CAT32_SKIP_JSON_REPORTER_RUN__ !== '1') {
  await runJsonReporter();
}
